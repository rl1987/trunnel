
const TWO = 2;
const THREE = 3;
/** The number four. */
const FOUR = 4;
const FIVE = 5;

/** Some numbers */
struct numbers {
   /** A number */
   u8 i8;
   u16 i16;
   u32 i32;
   u64 i64;
}

struct restricted {
   /** A restricted number */
   u32 i1 IN [ 1 ];
   u32 i2 IN [ 1..2, 5, 10 ];
   u32 i3 IN [ 1..THREE ];
}

struct nested {
   /** A structure in a structure */
   struct numbers num1;
   struct numbers num2;
   struct strings strs;
   struct restricted res;
}

struct uses_eos {
  u16 a;
  u16 b;
  eos;
}

struct fixed {
   /** A fixed array */
   u8  a8[4];
   u16 a16[6];
   u32 a32[THREE];
   u64 a64[1];

   struct numbers nums[TWO];
}

struct strings {
   /** A fixed array of char */
   char f[10];
   /** A nul-terminated string */
   nulterm nt;
}

struct varlen {
   u8 len1;
   u16 len2;
   u32 len3;
   u64 len4;

   /** A variable-length string */
   char str[len1];

   /** A variable-length array */
   u8 a8[len1];
   u16 a16[len2];
   u32 a32[len3];
   u64 a64[len4];

   struct numbers nums[len2];
}

struct union1 {
   u8 tag;
   /** A union. */
   union un[tag] {
     TWO: u8 a;
     3 .. 4: u16 b;
             u64 b2;
     FIVE: u8 c[16];
     6: nulterm d;
     7: struct numbers e;
     8: ;
   };

}

struct union2 {
   u8 tag;
   u16 length;
   /** A union with a length */
   union un[tag] WITH LENGTH length {
     TWO: u8 a;
     THREE: u16 b;
            ...;
     FOUR, 0x05:
           // A comment to get ignored.
           u8 c[16];
           u8 remainder[];
     8 : ;
     default: fail;
   };

   nulterm more;
}

struct union3 {
   u16 tag;
   u16 length;
   union un[tag] WITH LENGTH length {
     TWO: u8 a;
     default: u8 stuff[];
   };
}

struct union4 {
   u16 tag;
   u16 length;
   union un[tag] WITH LENGTH length {
     TWO: u8 a;
     default: ignore;
   };
}

struct extends {
   nulterm a;
   /** The rest of this thing. */
   u8 remainder[];
}
