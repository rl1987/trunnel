
FOR VERSION 1

  o Parse grammars
  o check grammars
  o Generate struct declarations
  o Generate struct manipulators
  o Generate struct encoders
  o Generate struct parsers

  o Finish writing code
    o Fix all XXXX items

  o real frontend.

  o Enforce integer constraints when parsing.

  o Pass minimal inputs to struct parsing inside length-specified unions.

  o Add comments to output (passthrough)

  o Identify and remove as many special cases as possible
    o Default: stuff.
    o At-end stuff.
    o Allow more things in unions.

  . Access functions
    - for unions?
    o for array members?

  o Set length fields for length-having unions automatically.

  o Write some tests for the C code
  o Get complete coverage for generator
  o Get complete coverage on generated code made by complete-coverage
    generator

  - Document it.
    - Explain that I don't care about things that need backtracking

  o Allow "u8 until_end[];" in eos position.



FOR VERSION 1.1 OR LATER

  - Forbid length fields of unions to get reused as anything else.

  - Allow length fields inside unions.

  - Allow nested structures

  - Add extra structure data fields and corresponding "clear" functions to
    output.

  - Do we need 'struct x until_end[];' ?

  - Extend checker to simplify?  Eg ranges.  C field names.

  - Write a thing to output nail grammars.
