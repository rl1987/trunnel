
const PAYLOAD_LEN = 509;
const RELAY_PAYLOAD_LEN = 498;

struct cell {
   u16 circ_id;
   u8 command;
   u8 body[PAYLOAD_LEN];
}

struct wide_cell {
   u32 circ_id;
   u8 command;
   u8 body[PAYLOAD_LEN];
}

struct var_cell {
   u16 circ_id;
   u8 command IN [ 7, 128..255 ];
   u16 length;
   u8 body[length];
}

struct wide_var_cell {
   u32 circ_id;
   u8 command IN [ 7, 128..255 ];
   u16 length;
   u8 body[length];
}

// Can't do versions. XXXX
// struct versions_cell_body {
//    u16 versions[];
// }

struct certs_cell_cert {
   u8 cert_type;
   u16 cert_len;
   u8 cert[cert_len];
}

struct certs_cell_body {
   u8 n_certs;
   struct certs_cell_cert certs[n_certs];
}

struct auth_challenge_cell {
   u8 challenge[32];
   u16 n_methods;
   u16 methods[n_methods];
}

struct authenticate_cell {
   u16 auth_type;
   u16 auth_len;
   union authentication[auth_type] WITH LENGTH auth_len {
      1: struct rsa_sha256_tlssecret_auth rsa_auth;
      default: fail;
   };
}

struct rsa_sha256_tlssecret_auth {
   u8 type[8];
   u8 cid[32];
   u8 sid[32];
   u8 slog[32];
   u8 clog[32];
   u8 scert[32];
   u8 tlssecrets[32];
   u8 rand[24];
   u8 sig[];
}

struct encoded_address {
 // XXXX WRITE MET
   u8 type;
   u8 len;
   union addr[type] WITH LENGTH len {
      0: u8 hostname[];
      4: u32 ipv4_addr;
      6: u8 ipv6_addr[16];
      default: ignore;
   };
}

struct netinfo_cell {
   u32 timestamp;
   struct encoded_address your_addr;
   u8 n_addrs;
   struct encoded_address my_addrs[n_addrs];
}

struct create2_cell {
   u16 htype;
   u16 hlen;
   union hdata[htype] WITH LENGTH hlen {
      0: struct tap_client_handshake tap;
      2: struct ntor_client_handshake ntor;
      default: fail;
   };
}

struct created2_cell {
  u16 hlen;
  u8 hdata[hlen];
}

struct extend2_cell {
  u8 n_specs;
  struct link_specifier linkspecs[n_specs];
  u8 create2_cell[];
}

const LS_IPV4 = 0x00;
const LS_IPV6 = 0x01;
const LS_LEGACY_ID = 0x02;

struct link_specifier {
  u8 ls_type;
  u8 ls_len;
  union un[ls_type] WITH LENGTH ls_len {
    LS_IPV4: u32 ipv4_addr; u16 ipv4_port;
    LS_IPV6: u8 ipv6_addr[16]; u16 ipv6_port;
    LS_LEGACY_ID: u8 legacy_id[20];
    default: u8 unrecognized[];
  };
}

const TAP_C_HANDSHAKE_LEN = 298;
const TAP_S_HANDSHAKE_LEN = 148;
const LEGACY_ID_LEN = 20;

struct extend_cell {
  u32 addr;
  u16 port;
  u8 onion_skin[TAP_C_HANDSHAKE_LEN];
  u8 node_id[LEGACY_ID_LEN];
}

struct tap_client_handshake {
   u8 pk_part[128];
   u8 symmetric_part[100];
}

struct tap_server_handshake {
   u8 dh_data[128];
   u8 kh[20];
}

struct ntor_client_handshake {
   u8 node_ids[20];
   u32 keyid[32];
   u32 client_pk[32];
}

struct ntor_server_handshake {
   u32 server_pk[32];
   u32 auth[32];
}

struct create_fast_cell {
   u8 key[20];
}

struct created_fast_cell {
   u8 key[20];
   u8 derivative_key_data[20];
}

struct relay_cell_body {
   u8 relay_command;
   u16 recognized;
   u16 stream_id;
   u8 digest[4];
   u16 len IN [ 0..RELAY_PAYLOAD_LEN ];
   u8 data[RELAY_PAYLOAD_LEN];
}

struct begin_cell_body {
   nulterm addrport;
   u32 flags;
}

struct connected_cell {
   u32 ipv4_addr;
   union ext_addr[ipv4_addr] {
     0: ;
     default:
              u8 addrtype IN [6];
              u8 ipv6_addr[16];
   };
   u32 ttl;
}

struct resolved_cell_item {
   struct encoded_address answer;
   u32 ttl;
}

// XXX this won't work.
//struct resolved_cell {
//   struct resolved_cell_item answers[];
//}

